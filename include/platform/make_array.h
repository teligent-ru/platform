//
// Inclusion of the boost::make_array proposal into the cb namespace
//
// Taken from kylelutz's proposal for boost under the Boost license:
// https://github.com/kylelutz/make_array/blob/master/include/boost/make_array.hpp
//
// with minor modifications to change boost dependencies to use std instead
// and to allow make_array to be constexpr

// ------------------------------------------------------------------------- //
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
// ------------------------------------------------------------------------- //

// LICENSE_1_0.txt:
// ------------------------------------------------------------------------- //
// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// ------------------------------------------------------------------------- //

#include <array>
#include <type_traits>

namespace cb {
namespace detail {

// Backport of constexpr std::forward (C++14 only)
template <class T>
constexpr T&& forward(typename std::remove_reference<T>::type& t) noexcept {
    return static_cast<T&&>(t);
}

template <class T>
constexpr T&& forward(typename std::remove_reference<T>::type&& t) noexcept {
    static_assert(!std::is_lvalue_reference<T>::value,
                  "Can not forward an rvalue as an lvalue.");
    return static_cast<T&&>(t);
}

// deduce array type
template <class ExplicitType, class... Args>
struct deduce_type {
    typedef ExplicitType type;
};

template <class... Args>
struct deduce_type<void, Args...> {
    typedef typename std::common_type<Args...>::type type;
};

} // end detail namespace

// make_array with zero-length
template <class T>
constexpr std::array<T, 0> make_array() {
    return std::array<T, 0>();
}

template <class ExplicitType = void, class... Args>
constexpr std::array<typename detail::deduce_type<ExplicitType, Args...>::type,
                     sizeof...(Args)>
make_array(Args&&... args) {
    typedef typename detail::deduce_type<ExplicitType, Args...>::type T;

    return std::array<T, sizeof...(Args)>{
            {static_cast<T>(detail::forward<Args>(args))...}};
}

} // end cb namespace
